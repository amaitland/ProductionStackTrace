<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <NoTargetFrameworkConstants Condition="'$(NoTargetFrameworkConstants)' == ''">false</NoTargetFrameworkConstants>
        <NoNuspecPackCommand Condition="'$(NoNuspecPackCommand)' == ''">false</NoNuspecPackCommand>
        <VersionFileName Condition="'$(VersionFileName)' == ''">semver.txt</VersionFileName>
    </PropertyGroup>
    <ItemGroup>
        <VersionFileSearch Include="$(ProjectDir)$(VersionFileName)" />
        <VersionFileSearch Include="$(SolutionDir)$(VersionFileName)" />
        <VersionFileSearch Include="$(SolutionDir).nuget\$(VersionFileName)" />
    </ItemGroup>
    
    
    <!--
        Define TARGET_NET_XX constants for the pre-compiler.
    -->
    <PropertyGroup Condition="!$(NoTargetFrameworkConstants)">
        <!-- Set compile time constants to detect target framework version during compilation -->
        <CustomConstants Condition=" '$(TargetFrameworkVersion)' == 'v2.0' ">TARGET_NET_20</CustomConstants>
        <CustomConstants Condition=" '$(TargetFrameworkVersion)' == 'v4.0' ">TARGET_NET_40</CustomConstants>
        <DefineConstants Condition=" '$(DefineConstants)' != '' And '$(CustomConstants)' != '' ">$(DefineConstants);</DefineConstants>
        <DefineConstants>$(DefineConstants)$(CustomConstants)</DefineConstants>
    </PropertyGroup>


    <!--
        Define NuGet pack command based on the NuSpec and found version.
    -->
    <Target Name="UpdateNuGetPackCommand" BeforeTargets="BuildPackage" Condition="!$(NoNuspecPackCommand)" DependsOnTargets="CommonBuildFindProjectBuildVersion">
        <PropertyGroup>
            <NuspecFile Condition="'$(NuspecFile)' == ''">$(ProjectName).nuspec</NuspecFile>
            <BuildCommand>$(NuGetCommand) pack "$(NuspecFile)" -Properties "Configuration=$(Configuration);Platform=$(Platform);Version=$(VersionSymVer)" $(NonInteractiveSwitch) -OutputDirectory "$(PackageOutputDir)" -symbols</BuildCommand>
        </PropertyGroup>
    </Target>



    <!--
        Defining custom Targets to execute before project compilation starts.
    -->
    <PropertyGroup>
        <CompileDependsOn>
            CommonBuildDefineModifiedAssemblyVersion;
            $(CompileDependsOn);
        </CompileDependsOn>
    </PropertyGroup>
    <!--
        Creates modified version of AssemblyInfo.cs, replaces [AssemblyVersion] attribute with the one 
        specifying actual build version (from MSBuild properties), and includes that file instead of the 
        original AssemblyInfo.cs in the compilation.
        
        Works with both, .cs and .vb version of the AssemblyInfo file, meaning it supports C# and VB.Net
        projects simultaneously.
    -->
    <Target Name="CommonBuildDefineModifiedAssemblyVersion" DependsOnTargets="CommonBuildFindProjectBuildVersion;_CommonBuildModifyAssemblyVersion">
    </Target>
    
    <Target Name="_CommonBuildModifyAssemblyVersion" 
            Condition="'$(VersionMajor)' != '' and '$(VersionMinor)' != '' and '$(VersionBuild)' != '' and '$(VersionRevision)' != ''">
        <!-- Find AssemblyInfo.cs or AssemblyInfo.vb in the "Compile" Items. Remove it from "Compile"
             Items because we will use a modified version instead. -->
        <ItemGroup>
            <OriginalAssemblyInfo Include="@(Compile)" Condition="%(Filename) == 'AssemblyInfo' And (%(Extension) == '.vb' Or %(Extension) == '.cs')" />
            <Compile Remove="**/AssemblyInfo.vb" />
            <Compile Remove="**/AssemblyInfo.cs" />
        </ItemGroup>
        <!-- Copy the original AssemblyInfo.cs/.vb to obj\ folder, i.e. $(IntermediateOutputPath). The
             copied filepath is saved into @(ModifiedAssemblyInfo) Item. -->
        <Copy SourceFiles="@(OriginalAssemblyInfo)"
              DestinationFiles="@(OriginalAssemblyInfo->'$(IntermediateOutputPath)%(Identity)')">
            <Output TaskParameter="DestinationFiles" ItemName="ModifiedAssemblyInfo"/>
        </Copy>
        <!-- Replace the version bit (in AssemblyVersion and AssemblyFileVersion attributes) using regular
             expression. Use the defined properties: $(VersionMajor), $(VersionMinor), etc. These are
             set by CommonBuildFindProjectBuildVersion target. -->
        <Message Text="Setting AssemblyVersion to $(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)" />
        <RegexUpdateFile Files="@(ModifiedAssemblyInfo)"
                    Regex="Version\(&quot;(\d+)\.(\d+)\.(\d+)\.(\d+)&quot;\)"
                    ReplacementText="Version(&quot;$(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)&quot;)"
                    />
        <!-- Include the modified AssemblyInfo.cs/.vb file in "Compile" items (instead of the original). -->
        <ItemGroup>
            <Compile Include="@(ModifiedAssemblyInfo)" />
        </ItemGroup>
    </Target>
    <!--
        Finds the version file and sets the VersionXXX properties by reading values from the file.
    -->
    <Target Name="CommonBuildFindProjectBuildVersion">
        <FindVersionFile Files="@(VersionFileSearch)">
            <Output ItemName="FoundVersion" TaskParameter="Result" />
        </FindVersionFile>

        <Message Importance="high" Text="Found build version xml file: %(FoundVersion.File) [%(FoundVersion.Identity)]" Condition="'@(FoundVersion)' != ''" />
        <PropertyGroup Condition="'@(FoundVersion)' != ''">
            <VersionSymVer>@(FoundVersion)</VersionSymVer>
            <VersionMajor>%(FoundVersion.Major)</VersionMajor>
            <VersionMinor>%(FoundVersion.Minor)</VersionMinor>
            <VersionBuild>%(FoundVersion.Build)</VersionBuild>
            <VersionRevision>%(FoundVersion.Revision)</VersionRevision>
        </PropertyGroup>
    </Target>

    <UsingTask TaskName="RegexUpdateFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Regex ParameterType="System.String" Required="true" />
            <ReplacementText ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Core" />
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try {
                    var rx = new System.Text.RegularExpressions.Regex(this.Regex);
                    for (int i = 0; i < Files.Length; ++i)
                    {
                        var path = Files[i].GetMetadata("FullPath");
                        if (!File.Exists(path)) continue;
                        
                        var txt = File.ReadAllText(path);
                        txt = rx.Replace(txt, this.ReplacementText);
                        File.WriteAllText(path, txt);
                    }
                    return true;
                }
                catch (Exception ex) {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask TaskName="FindVersionFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Result ParameterType="Microsoft.Build.Framework.ITaskItem" Output="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Core" />
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try {
                    var rxSymVer = new Regex(@"((\d+)\.(\d+)\.(\d+))(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?(?:\+([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?(?:\.(\d+))?");
                    for (int i = 0; i < Files.Length; ++i)
                    {
                        var path = Files[i].GetMetadata("FullPath");
                        if (!File.Exists(path)) continue;
                        
                        var m = rxSymVer.Match(File.ReadAllText(path));
                        if (m == Match.Empty) continue;
                        
                        Log.LogMessage("Found version: " + m.Groups[0]);
                        
                        Result = new TaskItem(m.Groups[0].ToString());
                        Result.SetMetadata("File", path);
                        Result.SetMetadata("Major", m.Groups[2].ToString());
                        Result.SetMetadata("Minor", m.Groups[3].ToString());
                        Result.SetMetadata("Build", m.Groups[4].ToString());
                        Result.SetMetadata("PreRelease", m.Groups[5].ToString());
                        Result.SetMetadata("BuildMeta", m.Groups[6].ToString());
                        Result.SetMetadata("Revision", m.Groups[7].Success ? m.Groups[7].ToString() : "0");
                    }
                    return true;
                }
                catch (Exception ex) {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

</Project>